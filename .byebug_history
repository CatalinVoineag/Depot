c
awesome_print order.send(model)[field]
field
awesome_print order.send(model)
awesome_print order.send(model).field
awesome_print order.send(model).first
awesome_print order.send(model)
ap order.send(model)
order.send(model)
order.argument
argument
model
c
order.model
n
model
c
model
c
order.model.slice
order.model.to_proc
order.model.to_param
model.to_param
model.to_query
awesome_print model.methods.sort
ap model.methods.sort
order.model.to_s
model.to_s
model
order.model.to_s
model
order.model
order.bill_address
order[model]
order
n
order
order.bill_addresses
order.bill_address
order[model]
model
c
model
c
order[field]
ap order
order = current_user.orders.where(step: 'payment').first
awesome_print current_user.orders
c
awesome_print current_user.orders
c
awesome_print current_user.orders
ap current_user.orders
current_user.orders.where(step: "payment")
field
exit
current_user.orders.count
ap current_user.orders.count
ap current_user.orders
current_user.orders
current_user
v l
awesome_print @order
ap @order
@order
c
@order_step
@order
self
field
c
@order_step
c
@order_step
c
@order_steps
@order_step
c
params
v l
@order_step
c
@order_step
c
@order_step
c
@order_step
c
params
v l
@steps
@step
exit
self.order_linesexit
self.order_lines
line
exit
cart_line.attributes
cart_line
cart_line.class
cart_line = cart.cart_lines.first
line = OrderLine.new(cart.cart_lines[0])
line = OrderLine.new(cart.cart_lines.first)
ap OrderLine
ap cart.cart_lines.first
ap line
self
cart.cart_linesself
cart.cart_lines
cart.lines
cart
exit
ap current_cart.cart_lines
ap current_cart
current_cart
params
c
model.constantize
model
c
User.correct_user_method(@user, @user.id)
c
@user.delivery_addresses.empty?
@user.delivery_addresses.nil?
@user.delivery_addresses
@user
c
id
user
c
user.id == id.to_i
id
user.id
user.id == id
user == id 
id
user
current_user
c
Thread.current[:current_user_idc]
Thread.current[:current_user_id]
Thread.current[:current_user]
Thread.current
User.current
current_user
session
v l
session
session[:user_id]
v l
vl 
User.current
c
self.current
c
self.current
User.current
c
Thread.current[:current_user_id]
Thread.current[:current_user]
Thread.current
self.current
c
User.current
c
self.current
v l
self
@user
@current_user
v l
current_scope
User.current
current_user
v l
@user
current_user
v l
c
params
user
c
user
c
User
@user
@user.correct_user_method
c
User.correct_user_method(params[:id])
n
c
    endc
      redirect_to root_path unless @user == current_user
      @user.correct_user_method(params[:id])
      #@user = User.find(params[:id])
    def correct_user
# Confirms the correct user
    end
      redirect_to root_path unless @user == current_user
      @user.correct_user_method(params[:id])
      #@user = User.find(params[:id])
    def correct_user
# Confirms the correct user
c
@user
c
v l
params
@user.correct_user
@user.correct_user?
@user
c
self
v l
current_path
request.referer
awesome_print session
 session
v l
c
v l
_old_path
_old_location
previous_path
store_location
v l
c
authorize @product
@product
c
@user.admin?
@user
c
ap options.keys.methods.sort
options.keys.email
options.keys[0]
options.keys['email']
options.keys['email]
options.keys('email')
options.keys[:email]
options.keys
options
options[:email].to_s
options[:email].to_query(:email)
options[:email].to_query
options[:email].inspect
options['catalin@example.com']
options['email']
options[:email]
options[:email].class
options('catalin@example.com')
options[:email]
options[:email].key
options[:email].to_s
options[email].to_s
c

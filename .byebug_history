c
ap @order.errors.full_messages
ap @order.errors
@order.errors
c
bill.errors.full_messagesc
bill.errors.full_messages.first
bill.errors.full_messages
bill.errors.full_messages.split("")
bill.errors.full_messages.split(",")
bill.errors.full_messages
ap bill.errors.full_messages
awesome_print bill.errors
ap bill.errors
bill.errors
bill.errors.full_messages.map{|e| e}
bill.errors.map{|e| e.message}
bill.errors.map{|e| e.messages
bill.errors.map{|e| e.messages}
bill.errors.map{|e| e.inspect}
bill.errors.map{|e| e.full_message}
bill.errors.map{|e| e.full_messages}
bill.errors.map{|e|}
bill.errors.count
c
AlertsHelper.getErrorAlertMessages(@order)
@order.errors.full_messages
c
action
ap params
c
ap params
c
@order.errors.full_messages
b = self.bill_address.assign_attributes(params)
ap params
self.bill_address
self.new_record?
bill
exit
self.new_record?
self.bill_address
self
@order
order
@bill_address
ap params
params
c
@bill_address
c
@bill_address
@order
c
@order
c
@order
@prder
c
@order
c
@order
@bill_address
c
cc
c
@order
@bill_address
c
self.errors
c
v l
locals
v l
c
ap @order.step
ap @order
@order.new_record?
c
@payment
c
continue
[A
@order.errors
c
@order.errors_in
@order
self
ap flash
flash
c
self.errors_in
c
self.errors_in
c
models.count
models.length
models.lenght
models
c
ap object.valid?
ap object
ap object.first
ap object
object = self.send(model)
model
c
ap self.send(model).valid?
ap self.send(model)
self.send(model)
model
model.constantize
model
self.model.constantize
self.model
model
c
@order
params
v l
c
@order
params
v l
c
order.payment.nil?
order.payment.present?
order = Order.find(16)
ap self
self
c
ap params
params[:order_id] = self.id
params[order_id] = self.id
ap params
params
self.id
self
CDself
c
@order.c
@order.payment.new
@order.payment
@order
c
@order
params
v l
c
@order
params
v l
c
@order
v l
params
c
awesome_print order.send(model)[field]
field
awesome_print order.send(model)
awesome_print order.send(model).field
awesome_print order.send(model).first
awesome_print order.send(model)
ap order.send(model)
order.send(model)
order.argument
argument
model
c
order.model
n
model
c
model
c
order.model.slice
order.model.to_proc
order.model.to_param
model.to_param
model.to_query
awesome_print model.methods.sort
ap model.methods.sort
order.model.to_s
model.to_s
model
order.model.to_s
model
order.model
order.bill_address
order[model]
order
n
order
order.bill_addresses
order.bill_address
order[model]
model
c
model
c
order[field]
ap order
order = current_user.orders.where(step: 'payment').first
awesome_print current_user.orders
c
awesome_print current_user.orders
c
awesome_print current_user.orders
ap current_user.orders
current_user.orders.where(step: "payment")
field
exit
current_user.orders.count
ap current_user.orders.count
ap current_user.orders
current_user.orders
current_user
v l
awesome_print @order
ap @order
@order
c
@order_step
@order
self
field
c
@order_step
c
@order_step
c
@order_steps
@order_step
c
params
v l
@order_step
c
@order_step
c
@order_step
c
@order_step
c
params
v l
@steps
@step
exit
self.order_linesexit
self.order_lines
line
exit
cart_line.attributes
cart_line
cart_line.class

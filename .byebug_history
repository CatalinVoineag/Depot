c
model.constantize
model
c
User.correct_user_method(@user, @user.id)
c
@user.delivery_addresses.empty?
@user.delivery_addresses.nil?
@user.delivery_addresses
@user
c
id
user
c
user.id == id.to_i
id
user.id
user.id == id
user == id 
id
user
current_user
c
Thread.current[:current_user_idc]
Thread.current[:current_user_id]
Thread.current[:current_user]
Thread.current
User.current
current_user
session
v l
session
session[:user_id]
v l
vl 
User.current
c
self.current
c
self.current
User.current
c
Thread.current[:current_user_id]
Thread.current[:current_user]
Thread.current
self.current
c
User.current
c
self.current
v l
self
@user
@current_user
v l
current_scope
User.current
current_user
v l
@user
current_user
v l
c
params
user
c
user
c
User
@user
@user.correct_user_method
c
User.correct_user_method(params[:id])
n
c
    endc
      redirect_to root_path unless @user == current_user
      @user.correct_user_method(params[:id])
      #@user = User.find(params[:id])
    def correct_user
# Confirms the correct user
    end
      redirect_to root_path unless @user == current_user
      @user.correct_user_method(params[:id])
      #@user = User.find(params[:id])
    def correct_user
# Confirms the correct user
c
@user
c
v l
params
@user.correct_user
@user.correct_user?
@user
c
self
v l
current_path
request.referer
awesome_print session
 session
v l
c
v l
_old_path
_old_location
previous_path
store_location
v l
c
authorize @product
@product
c
@user.admin?
@user
c
ap options.keys.methods.sort
options.keys.email
options.keys[0]
options.keys['email']
options.keys['email]
options.keys('email')
options.keys[:email]
options.keys
options
options[:email].to_s
options[:email].to_query(:email)
options[:email].to_query
options[:email].inspect
options['catalin@example.com']
options['email']
options[:email]
options[:email].class
options('catalin@example.com')
options[:email]
options[:email].key
options[:email].to_s
options[email].to_s
c
options[:email].to_s
options[:password].to_s
options.keys
options
v l
option
ap options.key
ap option.key
ap option.keys
ap options[:password].keys
ap options[:password].methods
options[:password].key
options[:password]
options[password]
options[password].key
ap options
c
\user.authenticate(params[:session][:password])
user.authenticate(params[:session][:password])
c
user.authenticate
c
params.to_a
bill.update_attributes(params)
bill.update_attributes
ap bill.methods.sort
bill
ap bill.attributes.methods.sort
bill.
bill.attribute
n
bill
c
n
bill
c
ap params
new = BillAddress.new(params)
params
c
new = BillAddress.new(params)
ap params
params
exit
ap params
exit
ap params
c
ac
c
n
ap params
params
order_params
c
@order.errors.full_messages
@order.valid?
c
@order.nil?
@order
c
exit
order.id
ap ids
ids
id
self.id
c
exit
OrderLine.new(order_id: id)
OrderLine.new(order_id: id, product_id: line.id, quantity: line.quantity)
c
ap self
self.id
exit
ap order
order.valid?
order = Order.new(order_fields)
ap order_fields
ap order_field
c
number_to_currency(total)
number_to_currency(total.to_i)
c
total.to_i
total
c
email
total_price(cart)
total_price
c
exit
current_cart
ap user.cart.cart_lines
ap user.cart
user.cart
user =  current_user
ap current_user
current_user
ap params
params
c
ap params
params
